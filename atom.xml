<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://huhaosanxiong.github.io</id>
    <title>huhsx&apos;s blog</title>
    <updated>2020-12-11T05:57:02.724Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://huhaosanxiong.github.io"/>
    <link rel="self" href="https://huhaosanxiong.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://huhaosanxiong.github.io/images/avatar.png</logo>
    <icon>https://huhaosanxiong.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, huhsx&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[iOS组件化CTMediator的实践]]></title>
        <id>https://huhaosanxiong.github.io/post/ios-zu-jian-hua-ctmediator-de-shi-jian/</id>
        <link href="https://huhaosanxiong.github.io/post/ios-zu-jian-hua-ctmediator-de-shi-jian/">
        </link>
        <updated>2020-12-02T09:57:42.000Z</updated>
        <content type="html"><![CDATA[<p><strong>创建远程索引库</strong></p>
<p>1）我们先在GitHub上创建一个organization</p>
<figure data-type="image" tabindex="1"><img src="https://images-cdn.shimo.im/fce1AfPQutkgIGNW/image.png!thumbnail" alt="图片" loading="lazy"></figure>
<p>2）添加一个远程索引库</p>
<figure data-type="image" tabindex="2"><img src="https://images-cdn.shimo.im/nXZZPjb5aT88KtWn/image.png!thumbnail" alt="图片" loading="lazy"></figure>
<p>3）创建本地索引库</p>
<ol>
<li>打开终端输入&quot;pod repo add 本地索引库的名字 远程索引库的地址&quot;命令创建本地索引库并和远程索引库做关联。</li>
<li><img src="https://images-cdn.shimo.im/ic0dPR3my3knK1XB/image.png!thumbnail" alt="图片" loading="lazy"></li>
<li>输入 &quot;pod repo&quot; 查看是否创建成功。</li>
</ol>
<p><strong>创建组件</strong></p>
<p>4）创建远程仓库，假设命名ModuleA</p>
<p>5）创建ModuleA的本地代码库，输入&quot;pod lib create 组件名&quot;，如果需要指定某个目录则先cd到所需目录，然后再执行以上命令，结果如图</p>
<figure data-type="image" tabindex="4"><img src="https://images-cdn.shimo.im/0iBpUKgF7YgqcEYd/image.png!thumbnail" alt="图片" loading="lazy"></figure>
<p>然后会自动创建一个工程，然后再Pods-&gt;Development Pods-&gt;ModuleA 目录下创建ModuleAViewController，并选择创建到Classes文件夹下，这个文件夹下的文件就是别人pod你的库时显示的文件。</p>
<figure data-type="image" tabindex="5"><img src="https://images-cdn.shimo.im/lCdvRJ84ZeAR7nrq/image.png!thumbnail" alt="图片" loading="lazy"></figure>
<p>6）编译组建不报错的话，可以修改ModuleA下的ModuleA.podspec文件，</p>
<figure data-type="image" tabindex="6"><img src="https://images-cdn.shimo.im/Br79Z82NcjY0ObTR/image.png!thumbnail" alt="图片" loading="lazy"></figure>
<p>改完之后</p>
<figure data-type="image" tabindex="7"><img src="https://images-cdn.shimo.im/m8enoYzYiGEfbH6y/image.png!thumbnail" alt="图片" loading="lazy"></figure>
<p>提交到远程仓库，并打tag</p>
<pre><code>git add .
git commit -m 'xxx'
git remote add origin https://github.com/ModulizationTestOrg/huhsxModulA.git
git push origin master
git tag 版本号（需与podspec中的版本号一致）
git push --tags
上面git push origin master 当你在远程创建了README.md或者 .gitigonre 文件时，先pull，因为两个仓库不同，发现refusing to merge unrelated histories，无法pull,因为他们是两个不同的项目，要把两个不同的项目合并,需要git pull origin master --allow-unrelated-histories
</code></pre>
<p>7）通过pod spec lint --verbose --allow-warnings 命令验证podspec索引文件，如果在前面podspec 文件中添加了自己的远程索引中的库，比如 s.dependency 'ModuleB' 时会出现</p>
<pre><code>-ERROR |[iOS]unknown: Encountered an unknown error(Unable to find a specification for'ModuleB')
</code></pre>
<p>报这个错的原因是校验podspec文件时默认只会到官方specs库（<a href="https://github.com/CocoaPods/Specs.git">https://github.com/CocoaPods/Specs.git</a>）去校验，这时候就需要同时指定自己创建的远程索引库地址库校验。<br>
解决办法：</p>
<pre><code>pod spec lint ModuleA.podspec --verbose --allow-warnings --sources='https://github.com/CocoaPods/Specs.git,https://github.com/ModulizationTestOrg/NewSpecs.git'
</code></pre>
<p>8）通过验证之后，再把索引文件推到远程索引仓库Newspecs中，输入</p>
<pre><code>pod repo push Newspecs ModuleA.podspec --verbose --allow-warnings
</code></pre>
<p>9）可以在.cocoapods/repos/Newspecs 中查看是否成功</p>
<figure data-type="image" tabindex="8"><img src="https://images-cdn.shimo.im/scBL593kKMI5WycZ/image.png!thumbnail" alt="图片" loading="lazy"></figure>
<p>10）使用的话和通过cocopod引入第三方一样(最好指定版本例如：pod 'ModuleA', '~&gt; 0.1.1)，在需要引入该组件的工程里修改podfile。</p>
<p>注：需要在Podfile中指定组件远程索引库地址，如果不指定默认会从master的索引库查找就会报找不到组件</p>
<figure data-type="image" tabindex="9"><img src="https://images-cdn.shimo.im/5mhusilQoUYl0KpE/image.png!thumbnail" alt="图片" loading="lazy"></figure>
<p>执行pod install ，就可以把这些组件pod到主工程了</p>
<figure data-type="image" tabindex="10"><img src="https://images-cdn.shimo.im/azP36OU4WBYvRy34/image.png!thumbnail" alt="图片" loading="lazy"></figure>
<p>想查看各个组件的依赖关系，打开Podfile.lock 文件，</p>
<figure data-type="image" tabindex="11"><img src="https://images-cdn.shimo.im/9g9RciEIvZM8JI4k/image.png!thumbnail" alt="图片" loading="lazy"></figure>
<p>11）这其中有2个组件ModuleA 和ModuleB， 其中带category的组件则是导向当前模块，</p>
<p>在ModuleA中，Target则为ModulAViewController ,Action则为Target_ModulAViewController，详细业务请参考主工程与pod中的4个组件的逻辑。</p>
<p><strong>2019-10-14更新：</strong></p>
<p>ModuleA与 moduleCategoryA的使用(我该怎么把我的部分业务暴露给他人使用)</p>
<p>12）组件化的使用</p>
<p><strong>业务组件:</strong></p>
<p>假设小A负责项目的一项业务，这项业务是通过一个图片名来显示一张图片。那么小A则需要在以下路径写一个负责这项业务的控制器(ShowImageViewController)。</p>
<p><strong>更正：class和func前面要添加open修饰，作用是外部的Module可以继承与重写。</strong></p>
<figure data-type="image" tabindex="12"><img src="https://uploader.shimo.im/f/udFMpqFmTusWPiRt.png!thumbnail" alt="图片" loading="lazy"></figure>
<p><strong>Target:</strong></p>
<p>并且同时要添加一个文件（Target_ShowImage），下划线后面的文字最好为组件的名字，同时创建一个同名的类，并且继承NSObejct。</p>
<p><strong>更正：class和func前面要添加open修饰，作用是外部的Module可以继承与重写。</strong></p>
<figure data-type="image" tabindex="13"><img src="https://uploader.shimo.im/f/1LZrwhH8alsmxC0z.png!thumbnail" alt="图片" loading="lazy"></figure>
<p><strong>中间件：（需要重复第4步重新新建一个组件）</strong></p>
<p>组件名称的命名规则是（业务组件名称拼接上Category）,新建好组件后，打开moduleGitlab.podspec，在最底下添加依赖 s.dependency &quot;CTMediator&quot; ，然后cd Example目录下执行pod install。创建CTMediator的扩展，文件的命名规则为CTMediator+组件名。</p>
<figure data-type="image" tabindex="14"><img src="https://uploader.shimo.im/f/bKcFjYJCWJoJQz7b.png!thumbnail" alt="图片" loading="lazy"></figure>
<p><strong>主工程调用:</strong></p>
<p>主工程（调用者）只需要在Podfile中添加组件和中间件，并且指定对应的版本。然后在需要的地方 #import &lt;CTMediator+ModulA.h&gt; ，然后再获取对应的ViewController即可。</p>
<figure data-type="image" tabindex="15"><img src="https://uploader.shimo.im/f/FPLimdFSWcUl2i8u.png!thumbnail" alt="图片" loading="lazy"></figure>
<p><strong>注意！以上所有的类和方法都必须要加上open,Extension中的方法用Publish修饰即可。</strong></p>
<p>附上地址：</p>
<p><a href="https://github.com/ModulizationTestOrg/ModulMainProject">主工程ModulMainProject</a></p>
<p><a href="https://github.com/ModulizationTestOrg/huhsxSpecs">远程索引库</a></p>
<p><a href="https://github.com/ModulizationTestOrg/huhsxModulA">ModulA业务</a></p>
<p><a href="https://github.com/ModulizationTestOrg/huhsxCategoryModulA">ModulACategory</a></p>
<p><a href="https://github.com/ModulizationTestOrg/huhsxModulB">ModulB业务</a></p>
<p><a href="https://github.com/ModulizationTestOrg/huhsxModulCategoryB">ModulBCategory</a></p>
]]></content>
    </entry>
</feed>